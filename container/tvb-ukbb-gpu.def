Bootstrap: library
From: ubuntu:20.04

%files
    /media/yat-lok/BATW/container/afnibinary /opt
    /media/yat-lok/BATW/container/freesurfer /opt


%post
    chmod 755 /root
    
    apt update -y
    apt install -y --no-install-recommends software-properties-common
    add-apt-repository -y universe

    add-apt-repository -y ppa:ubuntu-toolchain-r/test
    apt update -y
    apt upgrade -y
    # apt install -y gcc-9


    apt update && apt install -y --no-install-recommends \
    lsb-core libarchive-tools zip unzip gzip curl jq wget python3-pip bc dc strace \
    software-properties-common xvfb tcsh ca-certificates libtinfo-dev 

    # apt build-dep mesa
    add-apt-repository ppa:graphics-drivers/ppa
    apt update

    
    DEBIAN_FRONTEND=noninteractive apt -y install libgl1-mesa-dev libgl1-mesa-dri libglu1-mesa-dev freeglut3-dev mesa-common-dev \
    tclsh wish openjdk-8-jdk libx11-dev xorg-dev libglew1.5-dev libgl1-mesa-glx \
    mesa-utils freeglut3 libglw1-mesa libglw1-mesa-dev \
    xauth xorg openbox xserver-xorg libvte-common libvte-dev \
    libgomp1 libice6 libopenblas-base libxcursor1 libxft2 libxinerama1 libxrandr2 \
    libxrender1 libxt6 libfontconfig1 libfreetype6 freeglut3 libgtk-3-0 libgtk-3-dev \
    libsdl1.2-dev libsdl1.2debian libsm6 gstreamer1.0-plugins-base \
    ninja-build libosmesa6 libosmesa6-dev


    # vim8 because the creator of this image is a vim user
    add-apt-repository ppa:jonathonf/vim
    apt update -y
    apt install -y vim

    apt clean

    mkdir -p /opt/convert3d
    curl -fsSL https://sourceforge.net/projects/c3d/files/c3d/Nightly/c3d-nightly-Linux-x86_64.tar.gz/download \
    | tar -xz -C /opt/convert3d --strip-components 1

    export PATH="/opt/convert3d/bin:$PATH"


    apt install -y --no-install-recommends r-base r-cran-devtools \
    libblas-dev liblapack-dev gfortran r-cran-catools r-cran-gplots g++ && \
    Rscript -e 'require(devtools); install_version("kernlab", version="0.9-24")' && \
    Rscript -e 'require(devtools); install_version("ROCR", version="1.0-7")' && \
    Rscript -e 'require(devtools); install_version("class", version="7.3-14")' && \
    Rscript -e 'require(devtools); install_version("mvtnorm", version="1.0-8")' && \
    Rscript -e 'require(devtools); install_version("multcomp", version="1.4-8")' && \
    Rscript -e 'require(devtools); install_version("modeltools", version="0.2-23")' && \
    Rscript -e 'require(devtools); install_version("coin", version="1.2-2")' && \
    Rscript -e 'require(devtools); install_version("strucchange", version="1.5-3")'
    # Rscript -e 'require(devtools); install_version("party", version="1.0-25")'
    
    # in case installation fail
    wget https://cran.r-project.org/src/contrib/Archive/coin/coin_1.2-2.tar.gz
    R CMD INSTALL ./coin_1.2-2.tar.gz
    wget https://cran.r-project.org/src/contrib/Archive/party/party_1.0-25.tar.gz
    R CMD INSTALL ./party_1.0-25.tar.gz

    Rscript -e 'require(devtools); install_version("e1071", version="1.6-7")' && \
    Rscript -e 'require(devtools); install_version("randomForest", version="4.6-12")'



    # install conda
    curl https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -o mc.sh
    bash mc.sh -bfp /opt/miniconda3
    rm -f mc.sh

    __conda_setup="$('/opt/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "/opt/miniconda3/etc/profile.d/conda.sh" ]; then
            . "/opt/miniconda3/etc/profile.d/conda.sh"
        else
            export PATH="/opt/miniconda3/bin:$PATH"
        fi
    fi
    unset __conda_setup

    echo ". /opt/miniconda3/etc/profile.d/conda.sh" >> $SINGULARITY_ENVIRONMENT    
    /opt/miniconda3/bin/conda init bash
    eval $(conda shell.bash hook)

    yes | conda update conda
    conda install -y -c nvidia cudatoolkit=10.2
    conda install -y -c conda-forge ncurses

    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/miniconda3/lib"

    # just so we have them
    conda install -y -c conda-forge vim git


    # extract and install TVB-UKBB pipeline
    cd /opt
    

    mkdir tvb-pipeline
    cd /opt/tvb-pipeline
    wget https://github.com/yilewang/tvbdemos/raw/master/container/tvb-pipeline.zip
    unzip tvb-pipeline.zip
    rm -f tvb-pipeline.zip
    # mv ../tvb-ukbb .
    # yes | ./install_ukbb_norepo.sh
    yes | ./install_ukbb_singularity.sh
    
    conda clean -y --all
    # conda deactivate

    mkdir /opt/mcr && mkdir /mcr-install && cd /mcr-install && \
    wget https://ssd.mathworks.com/supportfiles/downloads/R2017b/deployment_files/R2017b/installers/glnxa64/MCR_R2017b_glnxa64_installer.zip && \
    unzip MCR_R2017b_glnxa64_installer.zip && \
    rm -rf MCR_R2017b_glnxa64_installer.zip && \
    ./install -destinationFolder /opt/mcr -agreeToLicense yes -mode silent && \
    cd / && rm -rf mcr-install

    export FSL_FIX_MCRROOT=/opt/mcr



    # install FSL and configure CUDA
    wget https://fsl.fmrib.ox.ac.uk/fsldownloads/fslinstaller.py
    python fslinstaller.py -d /opt/fsl
    echo '/opt/fsl/lib' > /etc/ld.so.conf.d/fsl.conf
    ldconfig
    cd /opt/fsl/bin && ln -sf eddy_cuda10.2 eddy_cuda

    export FSLDIR=/opt/fsl
    export FSL_DIR="${FSLDIR}"
    export FSLOUTPUTTYPE=NIFTI_GZ
    export PATH=/opt/fsl:$PATH
    export FSLMULTIFILEQUIT=TRUE
    export POSSUMDIR=/opt/fsl/bi
    export LD_LIBRARY_PATH=/opt/fsl/lib:$LD_LIBRARY_PATH
    export FSLTCLSH=/usr/bin/tclsh
    export FSLWISH=/usr/bin/wish

    # clean up a bit
    rm -f fslinstaller.py

    # symlink env so executable python scripts can find the
    # python installation on the PATH
    # ln -s /usr/bin/env /bin/env

    # make /bin/sh point to bash instead
    echo "dash dash/sh boolean false" | debconf-set-selections
    DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash

    export LD_LIBRARY_PATH="/usr/lib:$LD_LIBRARY_PATH"
    export LD_LIBRARY_PATH="/opt/miniconda3/lib:$LD_LIBRARY_PATH"
    export PATH="/opt/convert3d/bin:$PATH"
    
    export LIBGL_ALWAYS_INDIRECT=0
    export QT_X11_NO_MITSHM=1


    
    export TZ="America/Chicago"
    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
    apt-get update
    # install cmake first
    apt install -y build-essential libssl-dev
    ### the version of the cmake could be newer than 3.20
    cd /opt
    wget https://github.com/Kitware/CMake/releases/download/v3.20.2/cmake-3.20.2.tar.gz
    tar -zxvf cmake-3.20.2.tar.gz
    cd cmake-3.20.2
    ./bootstrap
    make
    make install
    # install ANTs
    cd /opt
    wget https://raw.githubusercontent.com/yilewang/tvbdemos/master/container/install_ants.sh
    chmod 755 ./install_ants.sh
    ./install_ants.sh
    
    # solve reload problem
    cd /opt/mcr/v93/bin/glnxa64
    mkdir exclude
    mv libfreetype* exclude

    # install conda env
    # conda install -c aarch64-staging gsl
    # conda install -y -c numba cudatoolkit=10.2
    # conda install -c conda-forge --yes xorg-libxp
    # conda install -c conda-forge --yes xorg-libxpm
    # conda install -c conda-forge --yes xorg-libxmu
    # conda install -c conda-forge --yes libpng
    # conda install -c conda-forge --yes xorg-libxft
    # conda install -c conda-forge --yes pillow

    # avoid 3dROIMaker warning
    apt-get install -y uuid-dev libgsl-dev
    ln -sf /usr/lib/x86_64-linux-gnu/libuuid.so /usr/lib/x86_64-linux-gnu/libuuid.so.1
    ln /usr/lib/x86_64-linux-gnu/libgsl.so /usr/lib/x86_64-linux-gnu/libgsl.so.0

    # avoid permission error
    chmod -R 755 /opt

    ### replace bedpostx and probtrackx cuda 10.2 version
    cd /opt
    mkdir bedpostx
    cd /opt/bedpostx
    wget http://users.fmrib.ox.ac.uk/~moisesf/Bedpostx_GPU/FSL_6/CUDA_10.2/bedpostx_gpu.zip
    unzip bedpostx_gpu.zip
    cp ./bin/* /opt/fsl/bin
    cp ./lib/* /opt/fsl/lib
 
    cd /opt
    mkdir probtrackx
    cd probtrackx
    wget http://users.fmrib.ox.ac.uk/~moisesf/Probtrackx_GPU/FSL_6/CUDA_10.2/probtrackx2_gpu.zip
    cp probtrackx2_gpu /opt/fsl/bin

    # install cuda 10.2
    apt install -y gpg-agent
    cd /opt
    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin
    mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600
    wget https://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda-repo-ubuntu1804-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb
    dpkg -i cuda-repo-ubuntu1804-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb
    apt-key add /var/cuda-repo-10-2-local-10.2.89-440.33.01/7fa2af80.pub
    apt-get update
    apt-get -y install cuda


%environment

    __conda_setup="$('/opt/miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "/opt/miniconda3/etc/profile.d/conda.sh" ]; then
            . "/opt/miniconda3/etc/profile.d/conda.sh"
        else
            export PATH="/opt/miniconda3/bin:$PATH"
            export LD_LIBRARY_PATH="/opt/miniconda3/lib:$LD_LIBRARY_PATH"
        fi
    fi
    unset __conda_setup

    export FSLDIR=/opt/fsl
    . $FSLDIR/etc/fslconf/fsl.sh
    export PATH=$FSLDIR/bin/:$PATH

    export LD_LIBRARY_PATH="/usr/lib:$LD_LIBRARY_PATH"
    export LD_LIBRARY_PATH="/opt/miniconda3/lib:$LD_LIBRARY_PATH"
    export PATH="/opt/convert3d/bin:$PATH"
    export LIBGL_ALWAYS_INDIRECT=0
    export QT_X11_NO_MITSHM=1

    # my favourite alias
    alias lr='ls -haltr'

%runscript
    echo "Container created ${NOW}"

    GITDIR=${2}
    echo "Git directory specified: ${GITDIR}"
    . ${GITDIR}/init_vars
    echo "Subject directory: ${1}"
    echo "Running..."
    exec python -u ${GITDIR}/bb_pipeline_tools/bb_pipeline.py ${1}


    

%labels
    Author nfrazier-logue@research.baycrest.org
    Author yile.wang@utdallas.edu
    Version v1.1

%help
    This is a TVB-UKBB container installed with FSL 6.0.5 and CUDA 10.2.
    It provides all necessary software, with the exeption of AFNI, ANTS,
    and FreeSurfer, to run the TVB-UKBB pipeline.
